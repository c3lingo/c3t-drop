extends layout.pug

block title
  title= talk.title + ' – ' + __('SITE_NAME')

block scripts
  script(src='/static/talk.js', defer)

block content
  .wrapper.stack-l

    if uploadCount > 0 || commentCount > 0
      .alert.alert-success
        if uploadCount > 0 && commentCount > 0
          = __n('We’ve received %s files and your comment.', uploadCount)
        else if uploadCount > 0
          = __n('We’ve received %s files.', uploadCount)
        else if commentCount > 0
          = __('We’ve received your comment.')
        =' '
        strong= __('THANKS_FOR_HELPING', eventName)
    else if nothingReceived
      .alert.alert-danger
        strong= __(`Sorry, we didn’t catch that.`)
        =' '
        = __(`It looks like you submitted an empty form.`)

    header.main-header.stack
      h1
        = talk.title
      p
        = talk.speakers.join(', ')
        =' · '
        = __n('Day %s', talk.day) + ', ' + talk.time

    section.stack
      h1= __('Upload Files')
      form.stack(method='POST', action='files/' enctype='multipart/form-data')
        input(type='hidden', name='id', value=talk.id)
        ul
          li= __('We’ll take any file type')
          li= __('You can upload multiple files at once')
          li= __('Maximum file size: %s MB', 50)
        .stack-0
          div
            label(for='input-files')
              = __('Choose one or more files to upload')
            =' '
            span.help= __('Optional')
          input#input-files(type='file', name='files', multiple)

        .stack-0
          div
            label(for='textarea-comment')= __('Comment')
            =' '
            span.help= __('Optional')
          textarea#textarea-comment(rows=5, name='comment')
        p.help
          =__('We’ll only use the files you upload to help us provide simultaneous interpretations of talks at this event. We won’t share them outside our group of volunteers without your consent.', eventName)
        p.help
          =__('Once uploaded, we’ll only display part of the file name and the date of its last modification.')
        p
          input(type='submit', value=__('Upload Files'))

    section.stack
      h1
        = __('Comments')
        =' '
        span.badge= talk.commentFiles.length
      if isAuthorized
        if talk.commentFiles.length
          .list
            each comment in comments
              article.comment
                pre= comment.body
                footer.text-muted= moment(comment.info.stats.ctime).locale(__('LOCALE')).format(__('DATE_TIME'))
        else
          .empty-state
            p= __('No comments have been submitted yet.')
      else
        .empty-state
          if talk.commentFiles.length
            p= __(`Sorry, you need read access to see comments.`)
          else
            p= __('No comments have been submitted yet.')

    section.stack
      h1
        =__('Uploaded So Far')
        =' '
        span.badge= talk.files.length
      if !talk.files.length
        .empty-state
          p= __('No files have been uploaded yet.')

      .link-list
        if isAuthorized
          a.link-list__item(href='files.zip')
            p.link-list__primary
              = __('Download All')
          each file in talk.files
            a.link-list__item(href=`files/${file.name}`)
              p.link-list__primary
                = file.name
              p.link-list__secondary
                = moment(file.meta.stats.mtime).locale(__('LOCALE')).format(__('DATE_TIME'))
              p.link-list__secondary
                | SHA-1:
                =' '
                if file.meta.hash
                  = file.meta.hash
                else
                  em= __('calculating')
        else
          each file in talk.files
            .link-list__item
              p.link-list__primary
                = file.redactedName
              p.link-list__secondary
                = moment(file.meta.stats.mtime).locale(__('LOCALE')).format(__('DATE_TIME'))
              p.link-list__secondary
                | SHA-1:
                =' '
                if file.meta.hash
                  = file.meta.hash
                else
                  em= __('calculating')
